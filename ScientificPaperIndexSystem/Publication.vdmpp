class Publication
types
public PublicationID = nat;
public OriginalPublicationTitle = seq of char;
public PublicationPublishYear = nat1;
public PublicationPublishDate=  nat;
public PublicationDOI = seq of char;
public PublicationRank = nat;


values
-- TODO Define values here
instance variables
private id: PublicationID := 0;
private originalTitle: OriginalPublicationTitle := [];
private publishYear: PublicationPublishYear:= 0000; --YYYY
private publishDate: PublicationPublishDate:= 0000; --MMDD
private doi: PublicationDOI:= [];
private rank: PublicationRank:= 0;

operations
-- TODO Define operations here
public Publication : PublicationID * OriginalPublicationTitle * 
										 PublicationPublishYear * PublicationPublishDate *
										 PublicationDOI * PublicationRank ==> Publication
	Publication(pid, opt, ppy, ppd, pdoi, pr) == (
		id := pid;
		originalTitle := opt;
		publishYear := ppy;
		publishDate := ppd;
		doi := pdoi;
		rank := pr;
		return self
	);
	
	public raiseRankBy: nat1 ==>()
	raiseRankBy(nRanks) == rank := rank+nRanks
	pre rank<1
	post rank<=1 and rank>rank~;
	
	public decreaseRankBy: nat1 ==>()
	decreaseRankBy(nRanks) == rank := rank-nRanks
	pre rank<=1
	post rank<rank~;
	
	pure public getId: () ==> PublicationID
	getId() == return id;
	
	pure public getPublishYear: () ==> PublicationPublishYear
	getPublishYear() == return publishYear;
	
	pure public getPublishDate: () ==> PublicationPublishDate
	getPublishDate() == return publishDate;
	
	pure public getDoi: () ==> PublicationDOI
	getDoi() == return doi;
	
	pure public getRank: () ==> PublicationRank
	getRank() == return rank;

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Publication