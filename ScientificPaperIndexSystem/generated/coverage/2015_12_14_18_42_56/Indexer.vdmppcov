class Indexer
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	private publications : map nat to Publication := { |->};
	private publicationIdCounter: nat:= 0;
	private authors : map nat to Author := { |->};
	private authorIdCounter : nat := 0;
	private affiliations : map nat to Affiliation := { |->};
	private affiliationIdCounter: nat := 0;
	private fieldsofstudy : map nat to FieldOfStudy := { |->};
	private fieldofstudyIdCounter: nat := 0;
	private publicationkeywords : map nat to PublicationKeyword := { |->};
	private publicationkeywordIdCounter: nat := 0;
	private publicationauthoraffiliations : map nat to PublicationAuthorAffiliation := { |->};
	private paaIdCounter: nat := 0;
	private publicationsreferences : map nat to PublicationReferences := { |->};
	private pReferencesIdCounter: nat := 0;
	private publicationurls : map nat to PublicationURL := { |->}; 
operations
	public Indexer: map nat to Publication * map nat to Author * map nat1 to Affiliation *
									map nat to FieldOfStudy * map nat to PublicationKeyword * map nat1 to PublicationAuthorAffiliation *
									map nat to PublicationReferences * map nat to PublicationURL ==> Indexer
					Indexer(pubs, auts, affs, fsos, pks, paas, prs, pus) ==
					(
						publications := pubs;
						authors := auts;
						affiliations := affs;
						fieldsofstudy := fsos;
						publicationkeywords := pks;
						publicationauthoraffiliations := paas;
						publicationsreferences := prs;
						publicationurls := pus;
						return self;
					);
					
	public Indexer: () ==> Indexer
					Indexer() ==
					(
						return self;
					);
					
					
	pure public getPublications: () ==> map nat1 to Publication
		getPublications() == return publications;
		
	pure public getAuthors: () ==> map nat1 to Author
		getAuthors() == return authors;
	
	pure public getAffiliations: () ==> map nat1 to Affiliation
		getAffiliations() == return affiliations;
	
	pure public getFieldsofstudy: () ==> map nat1 to FieldOfStudy
		getFieldsofstudy() == return fieldsofstudy;
	
	pure public getPublicationkeywords: () ==> map nat1 to PublicationKeyword
		getPublicationkeywords() == return publicationkeywords;
		
	pure public getPublicationauthoraffiliations: () ==> map nat1 to PublicationAuthorAffiliation
		getPublicationauthoraffiliations() == return publicationauthoraffiliations;
		
	pure public getPublicationsreferences: () ==> map nat1 to PublicationReferences
		getPublicationsreferences() == return publicationsreferences;
		
	pure public getPublicationurls: () ==> map nat1 to PublicationURL
		getPublicationurls() == return publicationurls;
		
	public insertAuthor: Author`AuthorName * set of Author`Interest ==> ()
		insertAuthor(an, ints) == 
				atomic(authorIdCounter := authorIdCounter+1;
							 authors := authors munion {authorIdCounter|-> new Author(an, ints)};
				
			
	public getAuthorById: nat1 ==> Author
		getAuthorById(id) ==
			return authors(id);
			
	public addInterestsToAuthor: nat1 * set of Author`Interest ==> ()
			addInterestsToAuthor(aid, intr) == 
			(dcl author: Author := getAuthorById(aid);
			author.addInterests(intr);
				authors := authors munion {aid |-> author}; 
				);
			
	public removeInterestsFromAuthor:  nat1 * set of Author`Interest ==>()
		removeInterestsFromAuthor(aid, intrs) ==
		(dcl author: Author := getAuthorById(aid);
			author.removeInterests(intrs);
			authors:= authors ++ {aid |-> author};
			);
			
	public insertPublication: Publication`OriginalPublicationTitle * Publication`PublicationPublishYear * Publication`PublicationPublishDate *
														Publication`PublicationDOI * Publication`PublicationRank * Author`AuthorID *
														Affiliation`AffiliationID ==> ()
		insertPublication(ortitle, pubyear, pubdate, pubdoi, pubrank, idau, idaf) == 
				atomic(publications := publications munion {publicationIdCounter|-> new Publication(ortitle, pubyear, pubdate, pubdoi, pubrank)};
				
				publicationauthoraffiliations:= publicationauthoraffiliations munion {paaIdCounter |-> new PublicationAuthorAffiliation(publicationIdCounter, idau, idaf, affiliations(idaf).getName())} 
				publicationIdCounter := publicationIdCounter+1;
				paaIdCounter:= paaIdCounter+1;
				)
				pre idau in set dom authors and
				idaf in set dom affiliations;
	
	
	
	public getPublicationsByAuthor: Author`AuthorID ==> set of PublicationAuthorAffiliation
	getPublicationsByAuthor(ida) == 
	(dcl pubs : set of PublicationAuthorAffiliation := {};
	for all pub in set rng publicationauthoraffiliations do
		if pub.getAutid() = ida
			then pubs := pubs union {pub};
	return pubs);
	
	public getAuthorByPublication: Publication`PublicationID ==> Author`AuthorID
		getAuthorByPublication(idp) ==
		(dcl aid: Author`AuthorID :=0;
		for all pub in set rng publicationauthoraffiliations do
		if idp = pub.getPubid()
		then aid:= pub.getAutid();
		return aid);
		
	
	
	public getReferencesFromAuthorPublications: set of PublicationAuthorAffiliation ==> set of Publication`PublicationID
	getReferencesFromAuthorPublications(pubs) ==
		 	(dcl idpubs: set of Publication`PublicationID := {};
		 		for all pub in set pubs do
		 			idpubs:= idpubs union {pub.getPubid()};
		 		(dcl idrefs: set of Publication`PublicationID := {};
		 			for all id in set rng publicationsreferences do
		 				idrefs:= idrefs union id.getPrids();
		 				return idrefs));
		
		
		--numero de citaçoes feitas pelo autor a si mesmo
		--TODO	
	public getNumberSelfCitations: Author`AuthorID ==> nat
		getNumberSelfCitations(ida)==
		(dcl selfpubs: set of PublicationAuthorAffiliation := getPublicationsByAuthor(ida);
			(dcl idrefs: set of Publication`PublicationID := getReferencesFromAuthorPublications(selfpubs);
				(dcl idselfref: set of Publication`PublicationID := {}; 
					for all refs in set idrefs do
							if ida = getAuthorByPublication(refs)
							then 	idselfref := idselfref union {refs};
						return card getReferencesFromAuthorPublications(selfpubs))));
		
		
		
	--numero de vezes que o autor é citado
	
	public getTimesCited: Author`AuthorID ==> nat
	getTimesCited(ida) == 
	(dcl authorpubs: set of PublicationAuthorAffiliation := getPublicationsByAuthor(ida);
	dcl pubscited: set of Publication`PublicationID := {};
	for all pubs in set authorpubs do
		for all references in set rng publicationsreferences do
			if pubs.getPubid() in set references.getPrids()
			then pubscited:= pubscited union {pubs.getPubid()};
			return card pubscited);
		 			
	
	public insertAffiliation: Affiliation`AffiliationName ==> ()
		insertAffiliation(name) == 
				atomic(affiliations := affiliations munion {affiliationIdCounter |-> new Affiliation(name)};
				affiliationIdCounter := affiliationIdCounter+1;);
		
		
		public insertReferences: Publication`PublicationID * set of Publication`PublicationID ==> ()
		insertReferences(idpub, idrefs) == 
				atomic(publicationsreferences := publicationsreferences munion {pReferencesIdCounter |-> new PublicationReferences(idpub, idrefs)};
				pReferencesIdCounter := pReferencesIdCounter+1;)
				pre idpub in set dom publications and
				idrefs subset dom publications and
				forall refs in set idrefs &
				(
					publications(idpub).getPublishYear() >= publications(refs).getPublishYear() and
					publications(idpub).getPublishDate() >= publications(refs).getPublishDate()
				)
					;
			

			
				
									
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Indexer