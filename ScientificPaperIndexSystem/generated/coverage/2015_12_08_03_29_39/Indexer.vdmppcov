class Indexer
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	private publications : map nat1 to Publication := { |->};
	private publicationIdCounter: nat1:= 1;
	private authors : map nat1 to Author := { |->};
	private authorIdCounter : nat1 := 1;
	private affiliations : map nat1 to Affiliation := { |->};
	private affiliationIdCounter: nat1 := 1;
	private fieldsofstudy : map nat1 to FieldOfStudy := { |->};
	private fieldofstudyIdCounter: nat1 := 1;
	private publicationkeywords : map nat1 to PublicationKeyword := { |->};
	private publicationkeywordIdCounter: nat1 := 1;
	private publicationauthoraffiliations : map nat1 to PublicationAuthorAffiliation := { |->};
	private paaIdCounter: nat1 := 1;
	private publicationsreferences : map nat1 to PublicationReferences := { |->};
	private pReferencesIdCounter: nat1 := 1;
	private publicationurls : map nat1 to PublicationURL := { |->}; 
operations
	public Indexer: map nat1 to Publication * map nat1 to Author * map nat1 to Affiliation *
									map nat1 to FieldOfStudy * map nat1 to PublicationKeyword * map nat1 to PublicationAuthorAffiliation *
									map nat1 to PublicationReferences * map nat1 to PublicationURL ==> Indexer
					Indexer(pubs, auts, affs, fsos, pks, paas, prs, pus) ==
					(
						publications := pubs;
						authors := auts;
						affiliations := affs;
						fieldsofstudy := fsos;
						publicationkeywords := pks;
						publicationauthoraffiliations := paas;
						publicationsreferences := prs;
						publicationurls := pus;
						return self;
					);
					
					
	pure public getPublications: () ==> map nat1 to Publication
		getPublications() == return publications;
		
	pure public getAuthors: () ==> map nat1 to Author
		getAuthors() == return authors;
	
	pure public getAffiliations: () ==> map nat1 to Affiliation
		getAffiliations() == return affiliations;
	
	pure public getFieldsofstudy: () ==> map nat1 to FieldOfStudy
		getFieldsofstudy() == return fieldsofstudy;
	
	pure public getPublicationkeywords: () ==> map nat1 to PublicationKeyword
		getPublicationkeywords() == return publicationkeywords;
		
	pure public getPublicationauthoraffiliations: () ==> map nat1 to PublicationAuthorAffiliation
		getPublicationauthoraffiliations() == return publicationauthoraffiliations;
		
	pure public getPublicationsreferences: () ==> map nat1 to PublicationReferences
		getPublicationsreferences() == return publicationsreferences;
		
	pure public getPublicationurls: () ==> map nat1 to PublicationURL
		getPublicationurls() == return publicationurls;
		
	public insertAuthor: Author`AuthorName * set of Author`Interest ==> ()
		insertAuthor(an, ints) == 
				atomic(authors := authors munion {authorIdCounter|-> new Author(an, ints)};
				authorIdCounter := authorIdCounter+1;);
			
	public getAuthorById: nat1 ==> Author
		getAuthorById(id) ==
			return authors(id);
			
	public addInterestsToAuthor: nat1 * set of Author`Interest ==> ()
			addInterestsToAuthor(aid, intr) == 
				authors := authors munion {aid |-> authors(aid).addInterests(intr)}; 
			
	public removeInterestsFromAuthor:  nat1 * set of Author`Interest ==>()
		removeInterestsFromAuthor(aid, intrs) ==
			authors:= authors ++ {aid |-> authors(aid).removeInterests(intrs)};
			
	public insertPublication: Publication`OriginalPublicationTitle * Publication`PublicationPublishYear * Publication`PublicationPublishDate *
														Publication`PublicationDOI * Publication`PublicationRank * Author`AuthorID *
														Affiliation`AffiliationID ==> ()
		insertPublication(ortitle, pubyear, pubdate, pubdoi, pubrank, idau, idaf) == 
				atomic(publications := publications munion {publicationIdCounter|-> new Publication(ortitle, pubyear, pubdate, pubdoi, pubrank)};
				
				publicationauthoraffiliations:= publicationauthoraffiliations munion {paaIdCounter |-> new PublicationAuthorAffiliation(publicationIdCounter, idau, idaf, affiliations(idaf).getName())} 
				publicationIdCounter := publicationIdCounter+1;
				paaIdCounter:= paaIdCounter+1;
				)
				pre idau in set dom authors and
				idaf in set dom affiliations;
	
	
	
	public getPublicationsByAuthor: Author`AuthorID ==> set of PublicationAuthorAffiliation
	getPublicationsByAuthor(ida) == 
	(dcl pubs : set of PublicationAuthorAffiliation := {};
	for all pub in set rng publicationauthoraffiliations do
		if pub.getAutid() = ida
			then pubs := pubs union {pub};
	return pubs);
	
	
	public getReferencesFromAuthorPublications: set of PublicationAuthorAffiliation ==> set of Publication`PublicationID
	getReferencesFromAuthorPublications(pubs) ==
		 	(dcl idpubs: set of Publication`PublicationID := {};
		 		for all pub in set pubs do
		 			idpubs:= idpubs union {pub.getPubid()};
		 		(dcl idrefs: set of Publication`PublicationID := {};
		 			for all id in set rng publicationsreferences do
		 				idrefs:= idrefs union id.getPrids();
		 				return idrefs));
		 			
	
	public insertAffiliation: Affiliation`AffiliationName ==> ()
		insertAffiliation(name) == 
				atomic(affiliations := affiliations munion {affiliationIdCounter |-> new Affiliation(name)};
				affiliationIdCounter := affiliationIdCounter+1;);
		
		
		public insertReferences: Publication`PublicationID * set of Publication`PublicationID ==> ()
		insertReferences(idpub, idrefs) == 
				atomic(publicationsreferences := publicationsreferences munion {pReferencesIdCounter |-> new PublicationReferences(idpub, idrefs)};
				pReferencesIdCounter := pReferencesIdCounter+1;)
				pre idpub in set dom publications and
				idrefs subset dom publications;
			

			
				
									
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Indexer